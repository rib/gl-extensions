EGL_EXT_swap_buffers_with_damage

    EXT_swap_buffers_with_damage

Name Strings

    EGL_EXT_swap_buffers_with_damage

Notice

    Copyright 2011 Intel Cooperation. All rights reserved.

Contributors

    Robert Bragg
    Tapani Pälli
    Kristian Høgsberg

Contacts

    Robert Bragg, Intel (robert.bragg 'at' intel.com)

Status

    Issued

Version

    4 - Feb 11, 2012

Number

    TBD

Dependencies

    Requires EGL 1.4

    This extension is written against the wording of the EGL 1.4 
    Specification.

Overview

    This extension provides a means to issue a swap buffers request to
    display the contents of the current back buffer and also specify a
    list of damage rectangles that can be passed to a system
    compositor so it can minimize how it has to recompose.

    This should be used in situations where an application is only
    animating a small portion of a surface since it enables the
    compositor to avoid wasting time recomposing parts of the surface
    that haven't changed.

New Procedures and Functions

    EGLBoolean eglSwapBuffersWithDamageEXT (
	EGLDisplay dpy,
	EGLSurface surface,
	EGLint *rects,
	EGLint n_rects);

New Tokens

    None

Additions to Section 3.9 of the EGL 1.4 Specification (Posting the
Color Buffer)

    Add the following text to the end of subsection 3.9.1 titled
    "Posting to a Window"

	As an alternative to eglSwapBuffers use:

	EGLBoolean eglSwapBuffersWithDamageEXT (
	    EGLDisplay dpy,
	    EGLSurface surface,
	    EGLint *rects,
	    EGLint n_rects);
	
	to do the same thing as eglSwapBuffers but additionally report
	a list of rectangles that defines the region that has truly
	changed since the last frame. To be clear; the entire contents
	of the back buffer will still be swapped to the front so
	applications using this API must still ensure that the entire
	back buffer is consistent. The rectangles are only a hint for
	the system compositor so it can avoid recomposing parts of the
	surface that haven't really changed.

	On success, EGL_TRUE is returned. In addition to the arguments
	passed to eglSwapBuffers, <rects> points to a list of integers
	in groups of four that each describe a rectangle in screen
	coordinates in this layout: {x, y, width, height}. The
	rectangles are specified relative to the top-left of the
	surface and the x and y components of each rectangle specify
	the top-left position of that rectangle. <n_rects> determines
	how many groups of 4 integers can be read from <rects>.  It is
	not necessary to avoid overlaps of the specified rectangles.
	    On failure, EGL_FALSE is returned. An EGL_NOT_INITIALIZED
	error is generated if EGL is not initialized on <dpy>. An
	EGL_BAD_PARAMETER error is generated if <surface> doesn't
	refer to a valid EGLSurface. An EGL_BAD_PARAMETER error is
	generated if <rects> is NULL and <n_rects> is greater than 0.

Dependencies on OpenGL ES

    None

Dependencies on OpenVG

    None

Issues

    Do applications have to make sure the rectangles don't overlap?

    RESOLVED: No, that would be inconvenient for applications and we
    see no difficulty for implementations to supporting overlapping
    rectangles.

Revision History

    Version 1, 29/07/2011
      - First draft
    Version 2, 03/08/2011
      - Clarify that the rectangles passed may overlap
    Version 3, 01/09/2011
      - Fix a missing '*' in prototype to make rects a pointer
    Version 4, 11/02/2012
      - Clarify that implementing in terms of eglSwapBuffers is valid
