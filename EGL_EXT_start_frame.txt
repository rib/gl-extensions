EGL_INTEL_start_frame

    INTEL_start_frame

Name Strings

    EGL_INTEL_start_frame

Notice

    Copyright 2011 Intel Cooperation. All rights reserved.

Contributors

    Robert Bragg
    Neil Roberts
    Tapani Pälli
    Kristian Høgsberg

Contacts

    Robert Bragg, Intel (robert.bragg 'at' intel.com)

Status

    Draft

Version

    4 - Nov 3, 2011

Number

    TBD

Dependencies

    Requires EGL 1.4

    This extension is written against the wording of the EGL 1.4 
    Specification.

Overview

    The aim of this extension is to allow applications to explicitly
    start new frames without using any client drawing commands. This
    allows applications to ensure that all required ancillary buffers
    for a new frame are in place and allows them to query surface
    attributes that may be affected by the start of a new frame.

    Attributes of a surface that might change at the start of a new
    frame could include the width and height for example. The
    designers of this extension also envisage having another extension
    making it possible to query the age of the back-buffer's contents
    so applications can efficiently re-use old buffer contents.  In
    this case it would be important to avoid using any client API
    drawing commands until the age is known.

New Procedures and Functions

    EGLBoolean eglStartFrameINTEL(
		    EGLDisplay dpy,
		    EGLSurface surface);

New Tokens

    None

Additions to Section 3.7 of the EGL 1.4 Specification (Rendering Contexts)

    Add the following text to a new subsection titled "Starting a new
    frame"

	It is not required that the EGL API be used to explicitly
	start a frame, since all client APIs can start a new frame
	implicitly. (For example glClear can be used to start a frame
	with OpenGL.) If EGL is used to start a new frame though
	applications get an opportunity to be able to query surface
	attributes before deciding how to draw any contents for the
	frame.
	
	Applications can use

	EGLBoolean eglStartFrameINTEL(
		    EGLDisplay dpy,
		    EGLSurface surface);

	to optionally notify EGL that they are starting a new frame
	ensuring that there is a back-buffer ready for rendering too
	and updating any attributes that would be affected by the
	start of a new frame. The frame is started with respect to the
	currently bound client api which can be queried using
	eglQueryAPI().

	Examples of attributes that could change at the start of a new
	frame are EGL_SURFACE_WIDTH and EGL_SURFACE_HEIGHT.

	On success, EGL_TRUE is returned. <surface> identifies the
	surface to be rendered too.
	    On failure, EGL_FALSE will be returned. An
	EGL_NOT_INITIALIZED error is generated if EGL is not
	initialized on dpy or if eglQueryAPI() would return EGL_NONE. An
	EGL_BAD_PARAMETER error is generated if <surface> doesn't refer to
	a valid EGLSurface.

Dependencies on OpenGL ES

    None

Dependencies on OpenVG

    None

Issues

    None

Revision History

    Version 1, 25/07/2011
      - First draft
    Version 2, 03/08/2011
      - Clarified semantics for using EGL_BUFFER_PRESERVED
    Version 3, 01/09/2011
      - Fixed a prototype inconsistency
    Version 4, 03/11/2011
      - Split out buffer age parts into separate extension
